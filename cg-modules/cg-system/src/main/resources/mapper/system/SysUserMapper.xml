<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.things.cgomp.system.mapper.SysUserMapper">

    <resultMap type="com.things.cgomp.system.api.domain.SysUser" id="SysUserResult">
        <id     property="userId"       column="user_id"      />
        <result property="orgId"       column="org_id"      />
        <result property="orgType"       column="org_type"      />
        <result property="username"     column="username"    />
        <result property="realName"     column="real_name"    />
        <result property="userType"     column="user_type"    />
        <result property="email"        column="email"        />
        <result property="mobile"  column="mobile"  />
        <result property="avatar"       column="avatar"       />
        <result property="password"     column="password"     />
        <result property="status"       column="status"       />
        <result property="delFlag"      column="del_flag"     />
        <result property="loginIp"      column="login_ip"     />
        <result property="loginDate"    column="login_date"   />
        <result property="createBy"     column="create_by"    />
        <result property="createTime"   column="create_time"  />
        <result property="updateBy"     column="update_by"    />
        <result property="updateTime"   column="update_time"  />
        <result property="remark"       column="remark"       />
		<result property="operatorId"   column="operator_id"     />
		<result property="siteRange"	column="site_range"/>
		<result property="operatorRange"	column="operator_range"/>
		<result property="passwordUpdateTime" column="password_update_time"/>
        <association property="org"    javaType="com.things.cgomp.system.api.domain.SysOrg"  resultMap="orgResult" />
        <collection  property="roles"   javaType="java.util.List"  resultMap="RoleResult" />
    </resultMap>
	
    <resultMap id="orgResult" type="com.things.cgomp.system.api.domain.SysOrg">
        <id     property="orgId"    column="org_id"     />
        <result property="parentId"  column="parent_id"   />
        <result property="orgName"  column="org_name"   />
        <result property="ancestors" column="ancestors"   />
        <result property="orderNum"  column="order_num"   />
        <result property="leader"    column="leader"      />
        <result property="type"    column="org_type"      />
        <result property="status"    column="org_status" />
    </resultMap>
	
    <resultMap id="RoleResult" type="SysRole">
        <id     property="roleId"       column="role_id"        />
        <result property="roleName"     column="role_name"      />
        <result property="roleCode"      column="role_code"       />
        <result property="roleSort"     column="role_sort"      />
        <result property="dataScope"    column="data_scope"     />
        <result property="status"       column="role_status"    />
    </resultMap>
	
	<sql id="selectUserVo">
        select u.user_id, u.org_id, u.username, u.real_name, u.user_type, u.email, u.avatar, u.mobile, u.password, u.status, u.del_flag,
               u.login_ip, u.login_date, u.create_by, u.create_time, u.remark, u.password_update_time, u.site_range, u.operator_range,
        o.org_id, o.parent_id, o.ancestors, o.org_name, o.order_num, o.leader, o.`type` as org_type, o.status as org_status,
        r.role_id, r.role_name, r.role_code, r.role_sort, r.data_scope, r.status as role_status, op.operator_id
        from system_user u
		    left join system_org o on u.org_id = o.org_id
		    left join system_user_role ur on u.user_id = ur.user_id
		    left join system_role r on r.role_id = ur.role_id
        	left join system_operator op on op.user_id = u.user_id
        	left join system_user_operator uop on uop.operator_id = op.operator_id
    </sql>
    
    <select id="selectUserList" parameterType="SysUser" resultMap="SysUserResult">
		<include refid="selectUserVo"/>
		where u.del_flag = '0'
		<if test="userId != null and userId != 0">
			AND u.user_id = #{userId}
		</if>
		<if test="username != null and username != ''">
			AND u.username like concat('%', #{username}, '%')
		</if>
		<if test="status != null and status != ''">
			AND u.status = #{status}
		</if>
		<if test="mobile != null and mobile != ''">
			AND u.mobile like concat('%', #{mobile}, '%')
		</if>
		<if test="params.beginTime != null and params.beginTime != ''"><!-- 开始时间检索 -->
			AND date_format(u.create_time,'%Y%m%d') &gt;= date_format(#{params.beginTime},'%Y%m%d')
		</if>
		<if test="params.endTime != null and params.endTime != ''"><!-- 结束时间检索 -->
			AND date_format(u.create_time,'%Y%m%d') &lt;= date_format(#{params.endTime},'%Y%m%d')
		</if>
		<if test="orgId != null and orgId != 0">
			AND (u.org_id = #{orgId} OR u.org_id IN ( SELECT t.org_id FROM system_org t WHERE find_in_set(#{orgId}, ancestors) ))
		</if>
		<if test="keyword != null and keyword != ''">
			AND u.username like concat('%', #{keyword}, '%') OR u.mobile like concat('%', #{keyword}, '%')
		</if>
		<if test="userType != null">
			AND u.user_type = #{userType}
		</if>
		<if test="orgType != null">
			AND o.type = #{orgType}
		</if>
		<if test="ignoreUserTypes != null and ignoreUserTypes.size() > 0">
			and u.user_type not in
			<foreach collection="ignoreUserTypes" item="type" open="(" separator="," close=")">
				#{type}
			</foreach>
		</if>
		<!-- 数据范围过滤 -->
		${params.dataScope}
		order by u.create_time desc
	</select>
	
	<select id="selectAllocatedList" parameterType="SysUser" resultMap="SysUserResult">
	    select distinct u.user_id, u.org_id, u.username, u.real_name, u.email, u.mobile, u.status, u.create_time
	    from system_user u
			 left join system_org o on u.org_id = o.org_id
			 left join system_user_role ur on u.user_id = ur.user_id
			 left join system_role r on r.role_id = ur.role_id
	    where u.del_flag = '0' and r.role_id = #{roleId}
	    <if test="username != null and username != ''">
			AND u.username like concat('%', #{username}, '%')
		</if>
		<if test="mobile != null and mobile != ''">
			AND u.mobile like concat('%', #{mobile}, '%')
		</if>
		<!-- 数据范围过滤 -->
		${params.dataScope}
	</select>
	
	<select id="selectUnallocatedList" parameterType="SysUser" resultMap="SysUserResult">
	    select distinct u.user_id, u.org_id, u.username, u.real_name, u.email, u.mobile, u.status, u.create_time
	    from system_user u
			 left join system_org o on u.org_id = o.org_id
			 left join system_user_role ur on u.user_id = ur.user_id
			 left join system_role r on r.role_id = ur.role_id
	    where u.del_flag = '0' and (r.role_id != #{roleId} or r.role_id IS NULL)
	    and u.user_id not in (select u.user_id from system_user u inner join system_user_role ur on u.user_id = ur.user_id and ur.role_id = #{roleId})
	    <if test="username != null and username != ''">
			AND u.username like concat('%', #{username}, '%')
		</if>
		<if test="mobile != null and mobile != ''">
			AND u.mobile like concat('%', #{mobile}, '%')
		</if>
		<!-- 数据范围过滤 -->
		${params.dataScope}
	</select>
	
	<select id="selectUserByUserName" parameterType="String" resultMap="SysUserResult">
	    <include refid="selectUserVo"/>
		where u.username = #{username} and u.del_flag = '0'
	</select>
	
	<select id="selectUserById" parameterType="Long" resultMap="SysUserResult">
		<include refid="selectUserVo"/>
		where u.user_id = #{userId}
	</select>
	
	<select id="checkUserNameUnique" parameterType="String" resultMap="SysUserResult">
		select user_id, username from system_user where username = #{username} and del_flag = '0' limit 1
	</select>
	
	<select id="checkPhoneUnique" parameterType="String" resultMap="SysUserResult">
		select user_id, mobile from system_user where mobile = #{mobile} and del_flag = '0' limit 1
	</select>
	
	<select id="checkEmailUnique" parameterType="String" resultMap="SysUserResult">
		select user_id, email from system_user where email = #{email} and del_flag = '0' limit 1
	</select>
	
	<insert id="insertUser" parameterType="SysUser" useGeneratedKeys="true" keyProperty="userId">
 		insert into system_user(
 			<if test="userId != null and userId != 0">user_id,</if>
 			<if test="orgId != null and orgId != 0">org_id,</if>
 			<if test="username != null and username != ''">username,</if>
 			<if test="realName != null and realName != ''">real_name,</if>
 			<if test="userType != null">user_type,</if>
 			<if test="email != null and email != ''">email,</if>
 			<if test="avatar != null and avatar != ''">avatar,</if>
 			<if test="mobile != null and mobile != ''">mobile,</if>
 			<if test="password != null and password != ''">password,</if>
 			<if test="status != null and status != ''">status,</if>
 			<if test="createBy != null and createBy != ''">create_by,</if>
 			<if test="remark != null and remark != ''">remark,</if>
 			<if test="siteRange != null">site_range,</if>
 			<if test="operatorRange != null">operator_range,</if>
 			create_time
 		)values(
 			<if test="userId != null and userId != ''">#{userId},</if>
 			<if test="orgId != null and orgId != ''">#{orgId},</if>
 			<if test="username != null and username != ''">#{username},</if>
 			<if test="realName != null and realName != ''">#{realName},</if>
 			<if test="userType != null">#{userType},</if>
 			<if test="email != null and email != ''">#{email},</if>
 			<if test="avatar != null and avatar != ''">#{avatar},</if>
 			<if test="mobile != null and mobile != ''">#{mobile},</if>
 			<if test="password != null and password != ''">#{password},</if>
 			<if test="status != null and status != ''">#{status},</if>
 			<if test="createBy != null and createBy != ''">#{createBy},</if>
 			<if test="remark != null and remark != ''">#{remark},</if>
			<if test="siteRange != null">#{siteRange},</if>
 			<if test="operatorRange != null">#{operatorRange},</if>
 			sysdate()
 		)
	</insert>
	
	<update id="updateUser" parameterType="SysUser">
 		update system_user
 		<set>
 			<if test="orgId != null and orgId != 0">org_id = #{orgId},</if>
 			<if test="username != null and username != ''">username = #{username},</if>
 			<if test="realName != null and realName != ''">real_name = #{realName},</if>
 			<if test="email != null ">email = #{email},</if>
 			<if test="mobile != null ">mobile = #{mobile},</if>
 			<if test="avatar != null and avatar != ''">avatar = #{avatar},</if>
 			<if test="password != null and password != ''">password = #{password},</if>
			<if test="passwordUpdateTime != null">password_update_time = #{passwordUpdateTime},</if>
 			<if test="status != null and status != ''">status = #{status},</if>
 			<if test="loginIp != null and loginIp != ''">login_ip = #{loginIp},</if>
 			<if test="loginDate != null">login_date = #{loginDate},</if>
 			<if test="updateBy != null and updateBy != ''">update_by = #{updateBy},</if>
 			<if test="remark != null">remark = #{remark},</if>
 			<if test="siteRange != null">site_range = #{siteRange},</if>
 			<if test="operatorRange != null">operator_range = #{operatorRange},</if>
 			update_time = sysdate()
 		</set>
 		where user_id = #{userId}
	</update>
	
	<update id="updateUserStatus" parameterType="SysUser">
 		update system_user set status = #{status} where user_id = #{userId}
	</update>
	
	<update id="updateUserAvatar" parameterType="SysUser">
 		update system_user set avatar = #{avatar} where username = #{username}
	</update>
	
	<update id="resetUserPwd" parameterType="SysUser">
 		update system_user set password = #{password}, password_update_time= now()
 		                   where username = #{username}
	</update>
	
	<delete id="deleteUserById" parameterType="Long">
 		update system_user set del_flag = '1' where user_id = #{userId}
 	</delete>
 	
 	<delete id="deleteUserByIds" parameterType="Long">
 		update system_user set del_flag = '1' where user_id in
 		<foreach collection="array" item="userId" open="(" separator="," close=")">
 			#{userId}
        </foreach> 
 	</delete>
	
</mapper> 