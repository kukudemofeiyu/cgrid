package com.things.cgomp.common.core.exception.enums;

/**
 * 业务异常的错误码区间，解决：解决各模块错误码定义，避免重复，在此只声明不做实际使用
 *
 * 一共 7 位，分成三段
 *
 * 第一段，1 位，类型
 *      1 - 业务级别异常
 *      x - 预留
 * 第二段，3 位，模块类型
 *      001 - 认证模块
 *      002 - 应用服务网关模块
 *      003 - 设备网关模块
 *      004 - 系统模块
 *      005 - 设备模块
 *      006 - 订单模块
 *      ... - ...
 * 第三段，3 位，子模块
 *      不限制规则。
 *      一般建议，每个系统里面，可能有多个模块，可以再去做分段。以系统模块为例子：
 *          001 - User 模块
 *          002 - Org 模块
 *          003 - Menu 模块
 * 第四段，3 位，错误码
 *       不限制规则。
 *       一般建议，每个模块自增。
 *
 * @author things
 */
public class ServiceErrorCodeRange {

    // 模块 auth 错误码区间 [1-001-000-000 ~ 1-002-000-000)
    // 模块 application-gw 错误码区间 [1-002-000-000 ~ 1-003-000-000)
    // 模块 device-gw 错误码区间 [1-003-000-000 ~ 1-004-000-000)
    // 模块 system 错误码区间 [1-004-000-000 ~ 1-005-000-000)
    // 模块 device 错误码区间 [1-005-000-000 ~ 1-006-000-000)
    // 模块 order 错误码区间 [1-006-000-000 ~ 1-007-000-000)
    // 模块 pay 错误码区间 [1-007-000-000 ~ 1-008-000-000)
    // 模块 alarm 错误码区间 [1-008-000-000 ~ 1-009-000-000)
    // 模块 app 错误码区间 [1-009-000-000 ~ 1-010-000-000)
    // 模块 file 错误码区间 [1-010-000-000 ~ 1-011-000-000)

    // 模块 security 错误码区间 [1-100-000-000 ~ 1-101-000-000)
}
